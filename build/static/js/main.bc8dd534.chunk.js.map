{"version":3,"sources":["App.js","index.js"],"names":["App","useState","currentAccount","setCurrentAccount","allWaves","setAllWaves","contractABI","abi","checkIfWalletIsConnected","a","window","ethereum","console","log","request","method","accounts","length","account","getAllWaves","connectWallet","alert","provider","ethers","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","waves","wavesCleaned","forEach","wave","push","address","waver","dateFrom","Date","dateTo","title","company","country","description","timestamp","getTotalWaves","count","toNumber","waveTxn","hash","wait","useEffect","className","onClick","map","index","key","style","backgroundColor","marginTop","padding","toString","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bc8dd534.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport \"./App.css\";\r\nimport { ethers } from \"ethers\";\r\nimport abi from \"./utils/WavePortal.json\";\r\n\r\nconst App = () => {\r\n  const [currentAccount, setCurrentAccount] = useState(\"\");\r\n  /*\r\n   * All state property to store all waves\r\n   */\r\n  const [allWaves, setAllWaves] = useState([]);\r\n  const contractAddress = \"0xE002F4488c1eC6FCE1Bf80504B7CEC475432B0f0\";\r\n  // 0xF122dec14280b48baD9697B897005b2f3517C7CA\";\r\n  const contractABI = abi.abi;\r\n  const checkIfWalletIsConnected = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (!ethereum) {\r\n        console.log(\"Make sure you have metamask!\");\r\n        return;\r\n      } else {\r\n        console.log(\"We have the ethereum object\", ethereum);\r\n      }\r\n\r\n      const accounts = await ethereum.request({ method: \"eth_accounts\" });\r\n\r\n      if (accounts.length !== 0) {\r\n        const account = accounts[0];\r\n        console.log(\"Found an authorized account:\", account);\r\n        setCurrentAccount(account);\r\n        getAllWaves();\r\n      } else {\r\n        console.log(\"No authorized account found\")\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n  * Implement your connectWallet method here\r\n  */\r\n  const connectWallet = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (!ethereum) {\r\n        alert(\"Get MetaMask!\");\r\n        return;\r\n      }\r\n\r\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\r\n\r\n      console.log(\"Connected\", accounts[0]);\r\n      setCurrentAccount(accounts[0]);\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  \r\n  /*\r\n   * Create a method that gets all waves from your contract\r\n   */\r\n  const getAllWaves = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n      if (ethereum) {\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\r\n\r\n        /*\r\n         * Call the getAllWaves method from your Smart Contract\r\n         */\r\n        const waves = await wavePortalContract.getAllWaves();\r\n\r\n\r\n        /*\r\n         * We only need address, timestamp, and message in our UI so let's\r\n         * pick those out\r\n         */\r\n        let wavesCleaned = [];\r\n        waves.forEach(wave => {\r\n          wavesCleaned.push({\r\n            address: wave.waver,\r\n            dateFrom: new Date(wave.dateFrom * 1000),\r\n            dateTo: new Date(wave.dateTo * 1000),\r\n            title: wave.title,\r\n            company: wave.company,\r\n            country: wave.country,\r\n            description: wave.description,\r\n            timestamp: new Date(wave.timestamp * 1000)\r\n          });\r\n        });\r\n\r\n        /*\r\n         * Store our data in React State\r\n         */\r\n        setAllWaves(wavesCleaned);\r\n      } else {\r\n        console.log(\"Ethereum object doesn't exist!\")\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  const wave = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (ethereum) {\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\r\n\r\n        let count = await wavePortalContract.getTotalWaves();\r\n        console.log(\"Retrieved total wave count...\", count.toNumber());\r\n\r\n        /*\r\n        * Execute the actual wave from your smart contract\r\n        */\r\n        const waveTxn = await wavePortalContract.wave(51840000,51900000,\"titulo!\",\"empresa\",\"pais\",\"descripcion\")\r\n        console.log(\"Mining...\", waveTxn.hash);\r\n\r\n        await waveTxn.wait();\r\n        console.log(\"Mined -- \", waveTxn.hash);\r\n\r\n        count = await wavePortalContract.getTotalWaves();\r\n        console.log(\"Retrieved total wave count...\", count.toNumber());\r\n      } else {\r\n        console.log(\"Ethereum object doesn't exist!\");\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    checkIfWalletIsConnected();\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"mainContainer\">\r\n      <div className=\"dataContainer\">\r\n        <div className=\"header\">\r\n        \r\n        </div>\r\n\r\n        <div className=\"bio\">\r\n          AMAZING TUTORIAL!\r\n        </div>\r\n\r\n        <button className=\"waveButton\" onClick={wave}>\r\n          Wave at Me\r\n        </button>\r\n        \r\n        {/*\r\n        * If there is no currentAccount render this button\r\n        */}\r\n        {!currentAccount && (\r\n          <button className=\"waveButton\" onClick={connectWallet}>\r\n            Connect Wallet\r\n          </button>\r\n        )}\r\n\r\n        {allWaves.map((wave, index) => {\r\n          return (\r\n            <div key={index} style={{ backgroundColor: \"OldLace\", marginTop: \"16px\", padding: \"8px\" }}>\r\n              <div>Address: {wave.address}</div>\r\n              <div>From: {wave.dateFrom.toString()}</div>\r\n              <div>To: {wave.dateTo.toString()}</div>\r\n              <div>Title: {wave.title}</div>\r\n              <div>Company: {wave.company}</div>\r\n              <div>Country: {wave.country}</div>\r\n              <div>Description: {wave.description}</div>\r\n              <div>Time: {wave.timestamp.toString()}</div>\r\n            </div>)\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}